Namespace(dataset='Cora', device='1', dropout=0.25, early_stopping=0, epochs=1500, exp_name='default_exp_name', hidden=256, layers=2, lr=0.001, runs=10, weight_decay=0.0005)
Size of train set: 60
Size of val set: 500
Size of test set: 1000
Num classes: 3
Num features: 500
Run: 1, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7620, test_acc: 0.7640
pavpu
tensor([0.2360, 0.5600, 0.6350, 0.6860, 0.7160, 0.7330, 0.7480, 0.7570, 0.7570,
        0.7660, 0.7650], dtype=torch.float64)
Run: 2, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7630
pavpu
tensor([0.2370, 0.5580, 0.6360, 0.6850, 0.7140, 0.7320, 0.7460, 0.7560, 0.7560,
        0.7660, 0.7640], dtype=torch.float64)
Run: 3, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7600, test_acc: 0.7610
pavpu
tensor([0.2380, 0.5600, 0.6360, 0.6840, 0.7170, 0.7370, 0.7520, 0.7540, 0.7560,
        0.7650, 0.7630], dtype=torch.float64)
Run: 4, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7660
pavpu
tensor([0.2350, 0.5560, 0.6360, 0.6810, 0.7110, 0.7300, 0.7470, 0.7580, 0.7580,
        0.7670, 0.7660], dtype=torch.float64)
Run: 5, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7600, test_acc: 0.7620
pavpu
tensor([0.2370, 0.5630, 0.6340, 0.6840, 0.7160, 0.7330, 0.7530, 0.7560, 0.7560,
        0.7650, 0.7640], dtype=torch.float64)
Run: 6, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7640, test_acc: 0.7630
pavpu
tensor([0.2370, 0.5600, 0.6370, 0.6840, 0.7150, 0.7360, 0.7480, 0.7560, 0.7580,
        0.7660, 0.7640], dtype=torch.float64)
Run: 7, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7680, test_acc: 0.7640
pavpu
tensor([0.2360, 0.5610, 0.6370, 0.6840, 0.7150, 0.7330, 0.7480, 0.7540, 0.7570,
        0.7650, 0.7630], dtype=torch.float64)
Run: 8, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7630
pavpu
tensor([0.2370, 0.5590, 0.6350, 0.6850, 0.7110, 0.7350, 0.7500, 0.7540, 0.7560,
        0.7650, 0.7640], dtype=torch.float64)
Run: 9, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7640, test_acc: 0.7640
pavpu
tensor([0.2370, 0.5570, 0.6360, 0.6850, 0.7140, 0.7360, 0.7490, 0.7550, 0.7570,
        0.7660, 0.7640], dtype=torch.float64)
Run: 10, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7650
pavpu
tensor([0.2360, 0.5610, 0.6330, 0.6820, 0.7120, 0.7330, 0.7470, 0.7570, 0.7570,
        0.7670, 0.7650], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 0,Precision sparsity: 0,Dropout rate: 0.125,samples : 20, Test Accuracy: 0.7635, std: 0.0014
0.125
Run: 1, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7640
pavpu
tensor([0.2360, 0.5570, 0.6330, 0.6810, 0.7120, 0.7290, 0.7470, 0.7560, 0.7570,
        0.7660, 0.7650], dtype=torch.float64)
Run: 2, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7680, test_acc: 0.7660
pavpu
tensor([0.2370, 0.5580, 0.6330, 0.6820, 0.7090, 0.7330, 0.7450, 0.7550, 0.7550,
        0.7650, 0.7640], dtype=torch.float64)
Run: 3, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7640, test_acc: 0.7650
pavpu
tensor([0.2380, 0.5600, 0.6390, 0.6850, 0.7170, 0.7350, 0.7510, 0.7540, 0.7580,
        0.7640, 0.7630], dtype=torch.float64)
Run: 4, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7620, test_acc: 0.7610
pavpu
tensor([0.2370, 0.5570, 0.6340, 0.6820, 0.7110, 0.7350, 0.7470, 0.7550, 0.7570,
        0.7650, 0.7640], dtype=torch.float64)
Run: 5, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7630
pavpu
tensor([0.2380, 0.5570, 0.6360, 0.6850, 0.7140, 0.7350, 0.7490, 0.7540, 0.7560,
        0.7640, 0.7630], dtype=torch.float64)
Run: 6, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7640, test_acc: 0.7640
pavpu
tensor([0.2380, 0.5620, 0.6330, 0.6810, 0.7130, 0.7330, 0.7490, 0.7520, 0.7550,
        0.7640, 0.7610], dtype=torch.float64)
Run: 7, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7700, test_acc: 0.7610
pavpu
tensor([0.2390, 0.5650, 0.6400, 0.6870, 0.7190, 0.7370, 0.7510, 0.7540, 0.7540,
        0.7630, 0.7620], dtype=torch.float64)
Run: 8, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7680, test_acc: 0.7640
pavpu
tensor([0.2350, 0.5580, 0.6360, 0.6800, 0.7080, 0.7330, 0.7460, 0.7580, 0.7590,
        0.7670, 0.7660], dtype=torch.float64)
Run: 9, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7640
pavpu
tensor([0.2370, 0.5600, 0.6350, 0.6830, 0.7140, 0.7330, 0.7490, 0.7530, 0.7570,
        0.7660, 0.7640], dtype=torch.float64)
Run: 10, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7610
pavpu
tensor([0.2370, 0.5600, 0.6370, 0.6830, 0.7140, 0.7330, 0.7480, 0.7570, 0.7570,
        0.7650, 0.7640], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 0,Precision sparsity: 0,Dropout rate: 0.250,samples : 20, Test Accuracy: 0.7633, std: 0.0018
0.25
Run: 1, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7700, test_acc: 0.7650
pavpu
tensor([0.2340, 0.5550, 0.6340, 0.6770, 0.7070, 0.7300, 0.7410, 0.7570, 0.7620,
        0.7690, 0.7670], dtype=torch.float64)
Run: 2, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7600, test_acc: 0.7590
pavpu
tensor([0.2360, 0.5550, 0.6340, 0.6830, 0.7110, 0.7380, 0.7480, 0.7560, 0.7580,
        0.7670, 0.7650], dtype=torch.float64)
Run: 3, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7640, test_acc: 0.7640
pavpu
tensor([0.2330, 0.5540, 0.6350, 0.6830, 0.7090, 0.7290, 0.7440, 0.7590, 0.7610,
        0.7700, 0.7680], dtype=torch.float64)
Run: 4, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7640, test_acc: 0.7670
pavpu
tensor([0.2360, 0.5600, 0.6370, 0.6850, 0.7090, 0.7310, 0.7410, 0.7580, 0.7580,
        0.7670, 0.7650], dtype=torch.float64)
Run: 5, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7620
pavpu
tensor([0.2370, 0.5620, 0.6360, 0.6830, 0.7120, 0.7320, 0.7470, 0.7570, 0.7570,
        0.7660, 0.7640], dtype=torch.float64)
Run: 6, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7640
pavpu
tensor([0.2370, 0.5580, 0.6390, 0.6810, 0.7130, 0.7340, 0.7490, 0.7550, 0.7590,
        0.7660, 0.7640], dtype=torch.float64)
Run: 7, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7640, test_acc: 0.7580
pavpu
tensor([0.2350, 0.5560, 0.6330, 0.6790, 0.7090, 0.7360, 0.7460, 0.7540, 0.7600,
        0.7680, 0.7660], dtype=torch.float64)
Run: 8, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7620, test_acc: 0.7580
pavpu
tensor([0.2370, 0.5550, 0.6320, 0.6800, 0.7130, 0.7300, 0.7470, 0.7540, 0.7570,
        0.7660, 0.7640], dtype=torch.float64)
Run: 9, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7680, test_acc: 0.7590
pavpu
tensor([0.2360, 0.5530, 0.6360, 0.6810, 0.7130, 0.7330, 0.7510, 0.7540, 0.7570,
        0.7670, 0.7650], dtype=torch.float64)
Run: 10, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7660, test_acc: 0.7640
pavpu
tensor([0.2370, 0.5560, 0.6390, 0.6790, 0.7130, 0.7310, 0.7500, 0.7540, 0.7580,
        0.7650, 0.7640], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 0,Precision sparsity: 0,Dropout rate: 0.500,samples : 20, Test Accuracy: 0.7620, std: 0.0033
0.5
Run: 1, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7870
pavpu
tensor([0.2150, 0.5130, 0.6010, 0.6520, 0.6940, 0.7240, 0.7600, 0.7810, 0.7910,
        0.7910, 0.7860], dtype=torch.float64)
Run: 2, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.8030
pavpu
tensor([0.1950, 0.4720, 0.5820, 0.6400, 0.6880, 0.7270, 0.7690, 0.7930, 0.7980,
        0.8020, 0.8060], dtype=torch.float64)
Run: 3, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.8020
pavpu
tensor([0.1950, 0.4730, 0.5780, 0.6490, 0.6900, 0.7240, 0.7670, 0.8010, 0.8130,
        0.8080, 0.8040], dtype=torch.float64)
Run: 4, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7960, test_acc: 0.7950
pavpu
tensor([0.2080, 0.5030, 0.5940, 0.6470, 0.7060, 0.7330, 0.7690, 0.7900, 0.7940,
        0.7960, 0.7910], dtype=torch.float64)
Run: 5, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7910
pavpu
tensor([0.2120, 0.4910, 0.5920, 0.6480, 0.6890, 0.7230, 0.7540, 0.7810, 0.7930,
        0.7900, 0.7890], dtype=torch.float64)
Run: 6, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.8000
pavpu
tensor([0.2050, 0.5180, 0.5950, 0.6330, 0.6860, 0.7220, 0.7710, 0.7880, 0.7910,
        0.7940, 0.7940], dtype=torch.float64)
Run: 7, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7940, test_acc: 0.7900
pavpu
tensor([0.2170, 0.4970, 0.6010, 0.6610, 0.6950, 0.7280, 0.7830, 0.7850, 0.7900,
        0.7870, 0.7840], dtype=torch.float64)
Run: 8, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7840
pavpu
tensor([0.2100, 0.4910, 0.5860, 0.6670, 0.7100, 0.7510, 0.7750, 0.7870, 0.7980,
        0.7930, 0.7910], dtype=torch.float64)
Run: 9, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.7930
pavpu
tensor([0.2050, 0.5040, 0.5980, 0.6780, 0.7130, 0.7400, 0.7750, 0.7980, 0.8030,
        0.8000, 0.7960], dtype=torch.float64)
Run: 10, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7870
pavpu
tensor([0.2090, 0.5080, 0.5970, 0.6620, 0.7060, 0.7290, 0.7790, 0.7930, 0.8020,
        0.7950, 0.7900], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 0,Dropout rate: 0.125,samples : 20, Test Accuracy: 0.7932, std: 0.0067
Run: 1, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7960
pavpu
tensor([0.2020, 0.4870, 0.5840, 0.6490, 0.6880, 0.7350, 0.7610, 0.8020, 0.8010,
        0.8020, 0.7990], dtype=torch.float64)
Run: 2, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8160, test_acc: 0.7900
pavpu
tensor([0.2090, 0.4900, 0.5920, 0.6520, 0.6930, 0.7320, 0.7630, 0.7870, 0.7960,
        0.7950, 0.7920], dtype=torch.float64)
Run: 3, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7980, test_acc: 0.7890
pavpu
tensor([0.2010, 0.4690, 0.5540, 0.6230, 0.6700, 0.7140, 0.7530, 0.7770, 0.7960,
        0.7980, 0.7980], dtype=torch.float64)
Run: 4, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8180, test_acc: 0.7970
pavpu
tensor([0.2080, 0.4870, 0.5820, 0.6500, 0.6930, 0.7190, 0.7520, 0.7740, 0.7960,
        0.7960, 0.7930], dtype=torch.float64)
Run: 5, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7920
pavpu
tensor([0.2060, 0.4710, 0.5850, 0.6470, 0.6810, 0.7210, 0.7690, 0.7850, 0.7970,
        0.8010, 0.7950], dtype=torch.float64)
Run: 6, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7980
pavpu
tensor([0.2060, 0.4750, 0.5770, 0.6350, 0.6780, 0.7160, 0.7600, 0.7910, 0.8020,
        0.8040, 0.7950], dtype=torch.float64)
Run: 7, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7890
pavpu
tensor([0.2200, 0.4880, 0.5850, 0.6530, 0.7000, 0.7250, 0.7620, 0.7770, 0.7810,
        0.7780, 0.7790], dtype=torch.float64)
Run: 8, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7960
pavpu
tensor([0.2090, 0.4810, 0.5780, 0.6570, 0.6920, 0.7270, 0.7640, 0.7890, 0.7990,
        0.8000, 0.7900], dtype=torch.float64)
Run: 9, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7850
pavpu
tensor([0.2180, 0.4690, 0.5780, 0.6430, 0.6890, 0.7350, 0.7570, 0.7840, 0.7900,
        0.7920, 0.7830], dtype=torch.float64)
Run: 10, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.8010
pavpu
tensor([0.2010, 0.4810, 0.5920, 0.6550, 0.6840, 0.7390, 0.7820, 0.7920, 0.7950,
        0.8050, 0.8000], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 0,Dropout rate: 0.250,samples : 20, Test Accuracy: 0.7933, std: 0.0050
Run: 1, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.8000
pavpu
tensor([0.2070, 0.4310, 0.5280, 0.6100, 0.6610, 0.7070, 0.7510, 0.7880, 0.7930,
        0.8030, 0.7940], dtype=torch.float64)
Run: 2, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8000, test_acc: 0.7990
pavpu
tensor([0.2110, 0.4200, 0.5170, 0.5980, 0.6550, 0.6910, 0.7230, 0.7620, 0.7890,
        0.7880, 0.7900], dtype=torch.float64)
Run: 3, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7850
pavpu
tensor([0.2170, 0.4230, 0.5250, 0.6190, 0.6690, 0.7080, 0.7540, 0.7820, 0.7900,
        0.7920, 0.7840], dtype=torch.float64)
Run: 4, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8260, test_acc: 0.7960
pavpu
tensor([0.2040, 0.4290, 0.5130, 0.5840, 0.6410, 0.6900, 0.7260, 0.7850, 0.7950,
        0.7980, 0.7950], dtype=torch.float64)
Run: 5, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7840
pavpu
tensor([0.2160, 0.4420, 0.5460, 0.6220, 0.6580, 0.7120, 0.7400, 0.7740, 0.7830,
        0.7830, 0.7830], dtype=torch.float64)
Run: 6, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8200, test_acc: 0.7950
pavpu
tensor([0.2020, 0.4260, 0.5270, 0.6170, 0.6710, 0.6970, 0.7380, 0.7660, 0.7970,
        0.7990, 0.7990], dtype=torch.float64)
Run: 7, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7930
pavpu
tensor([0.2110, 0.4290, 0.5380, 0.6160, 0.6770, 0.7130, 0.7650, 0.7880, 0.7900,
        0.7950, 0.7900], dtype=torch.float64)
Run: 8, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7980, test_acc: 0.7830
pavpu
tensor([0.2180, 0.4200, 0.5100, 0.6010, 0.6560, 0.7100, 0.7500, 0.7780, 0.7890,
        0.7880, 0.7830], dtype=torch.float64)
Run: 9, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7980, test_acc: 0.7870
pavpu
tensor([0.2100, 0.4150, 0.5180, 0.6010, 0.6600, 0.7040, 0.7570, 0.7850, 0.7900,
        0.7970, 0.7910], dtype=torch.float64)
Run: 10, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.7890
pavpu
tensor([0.2180, 0.4260, 0.5340, 0.6080, 0.6660, 0.7050, 0.7440, 0.7700, 0.7800,
        0.7850, 0.7830], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 0,Dropout rate: 0.500,samples : 20, Test Accuracy: 0.7911, std: 0.0063
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8260, test_acc: 0.7980
pavpu
tensor([0.2030, 0.3920, 0.4950, 0.5740, 0.6390, 0.6890, 0.7400, 0.7780, 0.7980,
        0.7990, 0.7980], dtype=torch.float64)
Run: 2, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.7970
pavpu
tensor([0.2030, 0.3870, 0.4950, 0.5670, 0.6370, 0.6850, 0.7540, 0.7900, 0.8000,
        0.8080, 0.7980], dtype=torch.float64)
Run: 3, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7880
pavpu
tensor([0.2050, 0.3870, 0.4960, 0.5930, 0.6420, 0.6970, 0.7320, 0.7890, 0.8070,
        0.8060, 0.7960], dtype=torch.float64)
Run: 4, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8180, test_acc: 0.7970
pavpu
tensor([0.1950, 0.3980, 0.4980, 0.5810, 0.6330, 0.6950, 0.7430, 0.7940, 0.8090,
        0.8080, 0.8040], dtype=torch.float64)
Run: 5, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7970
pavpu
tensor([0.1980, 0.3840, 0.4980, 0.5840, 0.6490, 0.6920, 0.7560, 0.7820, 0.8030,
        0.8040, 0.8030], dtype=torch.float64)
Run: 6, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.7980
pavpu
tensor([0.2000, 0.4170, 0.5010, 0.5950, 0.6500, 0.7000, 0.7460, 0.7780, 0.7930,
        0.8030, 0.8010], dtype=torch.float64)
Run: 7, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.8060
pavpu
tensor([0.1960, 0.3810, 0.4810, 0.5860, 0.6470, 0.6870, 0.7240, 0.7760, 0.8020,
        0.8070, 0.8050], dtype=torch.float64)
Run: 8, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8000, test_acc: 0.8060
pavpu
tensor([0.1930, 0.3780, 0.4780, 0.5630, 0.6260, 0.6820, 0.7360, 0.7880, 0.8070,
        0.8060, 0.8080], dtype=torch.float64)
Run: 9, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8220, test_acc: 0.8000
pavpu
tensor([0.1970, 0.3760, 0.4770, 0.5500, 0.6240, 0.6770, 0.7220, 0.7780, 0.8010,
        0.8120, 0.8040], dtype=torch.float64)
Run: 10, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8220, test_acc: 0.8010
pavpu
tensor([0.2030, 0.3890, 0.4880, 0.5900, 0.6420, 0.6900, 0.7430, 0.7880, 0.7990,
        0.7980, 0.7960], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.125,samples : 5, Test Accuracy: 0.7988, std: 0.0051
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.7930
pavpu
tensor([0.2020, 0.3770, 0.4570, 0.5230, 0.6100, 0.6760, 0.7150, 0.7670, 0.7900,
        0.8060, 0.7990], dtype=torch.float64)
Run: 2, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7970
pavpu
tensor([0.2060, 0.3740, 0.4690, 0.5590, 0.6200, 0.6740, 0.7370, 0.7730, 0.7900,
        0.7960, 0.7950], dtype=torch.float64)
Run: 3, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7870
pavpu
tensor([0.2180, 0.3950, 0.4880, 0.5670, 0.6310, 0.6920, 0.7450, 0.7730, 0.7940,
        0.7940, 0.7830], dtype=torch.float64)
Run: 4, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7840
pavpu
tensor([0.2100, 0.3620, 0.4600, 0.5440, 0.6130, 0.6830, 0.7370, 0.7710, 0.7860,
        0.8000, 0.7890], dtype=torch.float64)
Run: 5, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8280, test_acc: 0.7990
pavpu
tensor([0.1970, 0.3630, 0.4640, 0.5700, 0.6430, 0.6800, 0.7250, 0.7800, 0.8030,
        0.8100, 0.8040], dtype=torch.float64)
Run: 6, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.8000
pavpu
tensor([0.1990, 0.3490, 0.4370, 0.5300, 0.5940, 0.6660, 0.7220, 0.7800, 0.8060,
        0.8080, 0.8020], dtype=torch.float64)
Run: 7, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.7990
pavpu
tensor([0.2050, 0.3550, 0.4630, 0.5430, 0.6160, 0.6800, 0.7250, 0.7790, 0.8060,
        0.8120, 0.7960], dtype=torch.float64)
Run: 8, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8200, test_acc: 0.8020
pavpu
tensor([0.2010, 0.3740, 0.4500, 0.5620, 0.6270, 0.6800, 0.7350, 0.7700, 0.7930,
        0.8050, 0.8000], dtype=torch.float64)
Run: 9, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.7880
pavpu
tensor([0.2140, 0.3780, 0.4680, 0.5610, 0.6230, 0.6740, 0.7350, 0.7650, 0.7810,
        0.7990, 0.7870], dtype=torch.float64)
Run: 10, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7900
pavpu
tensor([0.2140, 0.3620, 0.4830, 0.5470, 0.6080, 0.6680, 0.7210, 0.7660, 0.7850,
        0.7910, 0.7870], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.250,samples : 5, Test Accuracy: 0.7939, std: 0.0063
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7940, test_acc: 0.7950
pavpu
tensor([0.2020, 0.3040, 0.3780, 0.4690, 0.5390, 0.6030, 0.6860, 0.7460, 0.8030,
        0.8120, 0.7990], dtype=torch.float64)
Run: 2, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8220, test_acc: 0.7910
pavpu
tensor([0.2050, 0.3090, 0.3870, 0.4550, 0.5210, 0.5980, 0.6760, 0.7350, 0.7770,
        0.7980, 0.7940], dtype=torch.float64)
Run: 3, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.7960
pavpu
tensor([0.2050, 0.3170, 0.3960, 0.4840, 0.5580, 0.6310, 0.7080, 0.7610, 0.7880,
        0.7990, 0.7960], dtype=torch.float64)
Run: 4, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7960
pavpu
tensor([0.2020, 0.3220, 0.4200, 0.4950, 0.5640, 0.6520, 0.7150, 0.7540, 0.7850,
        0.8010, 0.7990], dtype=torch.float64)
Run: 5, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8180, test_acc: 0.8000
pavpu
tensor([0.1920, 0.2920, 0.3650, 0.4470, 0.5270, 0.5990, 0.6630, 0.7200, 0.7950,
        0.8090, 0.8090], dtype=torch.float64)
Run: 6, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.8040
pavpu
tensor([0.2010, 0.3150, 0.4010, 0.4840, 0.5640, 0.6280, 0.7050, 0.7540, 0.7930,
        0.7990, 0.8000], dtype=torch.float64)
Run: 7, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7860
pavpu
tensor([0.2050, 0.3100, 0.3900, 0.4680, 0.5480, 0.6110, 0.6740, 0.7370, 0.7660,
        0.7930, 0.7940], dtype=torch.float64)
Run: 8, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7840
pavpu
tensor([0.2130, 0.3330, 0.4050, 0.4790, 0.5590, 0.6250, 0.7100, 0.7470, 0.7710,
        0.7940, 0.7880], dtype=torch.float64)
Run: 9, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7860, test_acc: 0.7840
pavpu
tensor([0.2060, 0.3310, 0.4040, 0.4950, 0.5650, 0.6300, 0.6940, 0.7480, 0.7830,
        0.7970, 0.7950], dtype=torch.float64)
Run: 10, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7950
pavpu
tensor([0.1980, 0.3000, 0.3950, 0.4830, 0.5500, 0.6340, 0.6940, 0.7490, 0.7860,
        0.8060, 0.8030], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.500,samples : 5, Test Accuracy: 0.7931, std: 0.0068
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.7970
pavpu
tensor([0.2000, 0.3740, 0.4550, 0.5560, 0.6120, 0.6730, 0.7140, 0.7710, 0.7930,
        0.7980, 0.8010], dtype=torch.float64)
Run: 2, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7980, test_acc: 0.8010
pavpu
tensor([0.2020, 0.3930, 0.4840, 0.5620, 0.6130, 0.6830, 0.7360, 0.7690, 0.7990,
        0.7970, 0.7970], dtype=torch.float64)
Run: 3, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7900, test_acc: 0.7930
pavpu
tensor([0.2030, 0.3990, 0.4950, 0.5810, 0.6310, 0.6820, 0.7310, 0.7840, 0.7930,
        0.8030, 0.7980], dtype=torch.float64)
Run: 4, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.8050
pavpu
tensor([0.2000, 0.3800, 0.4820, 0.5700, 0.6330, 0.6840, 0.7390, 0.7780, 0.7960,
        0.8110, 0.8010], dtype=torch.float64)
Run: 5, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7890
pavpu
tensor([0.2080, 0.4090, 0.5030, 0.5860, 0.6390, 0.6980, 0.7390, 0.7710, 0.7910,
        0.7980, 0.7930], dtype=torch.float64)
Run: 6, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8260, test_acc: 0.7950
pavpu
tensor([0.2010, 0.3900, 0.4990, 0.5800, 0.6600, 0.7120, 0.7570, 0.7840, 0.8000,
        0.8020, 0.7980], dtype=torch.float64)
Run: 7, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8260, test_acc: 0.8040
pavpu
tensor([0.1940, 0.3580, 0.4740, 0.5590, 0.6230, 0.6650, 0.7110, 0.7920, 0.8060,
        0.8080, 0.8050], dtype=torch.float64)
Run: 8, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8180, test_acc: 0.7950
pavpu
tensor([0.1980, 0.3840, 0.4900, 0.5740, 0.6440, 0.6840, 0.7430, 0.7790, 0.7980,
        0.8000, 0.8010], dtype=torch.float64)
Run: 9, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.7920
pavpu
tensor([0.2000, 0.3880, 0.4980, 0.5890, 0.6500, 0.6890, 0.7350, 0.7830, 0.7950,
        0.8010, 0.7990], dtype=torch.float64)
Run: 10, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8000, test_acc: 0.7820
pavpu
tensor([0.2160, 0.3810, 0.4820, 0.5700, 0.6220, 0.6740, 0.7400, 0.7740, 0.7810,
        0.7850, 0.7830], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.125,samples : 10, Test Accuracy: 0.7953, std: 0.0070
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8000, test_acc: 0.7960
pavpu
tensor([0.2030, 0.3760, 0.4790, 0.5560, 0.6250, 0.6820, 0.7210, 0.7760, 0.8000,
        0.7960, 0.7960], dtype=torch.float64)
Run: 2, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7980
pavpu
tensor([0.2020, 0.3660, 0.4720, 0.5500, 0.6240, 0.6900, 0.7370, 0.7670, 0.7930,
        0.8060, 0.7990], dtype=torch.float64)
Run: 3, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7960
pavpu
tensor([0.1980, 0.3570, 0.4530, 0.5340, 0.5980, 0.6630, 0.7290, 0.7690, 0.8030,
        0.8100, 0.8030], dtype=torch.float64)
Run: 4, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.8010
pavpu
tensor([0.1950, 0.3600, 0.4670, 0.5670, 0.6300, 0.6910, 0.7400, 0.7790, 0.8000,
        0.8050, 0.8060], dtype=torch.float64)
Run: 5, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7920
pavpu
tensor([0.2010, 0.3650, 0.4580, 0.5400, 0.6140, 0.6790, 0.7230, 0.7880, 0.8050,
        0.8080, 0.8000], dtype=torch.float64)
Run: 6, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.8010
pavpu
tensor([0.1990, 0.3790, 0.4800, 0.5800, 0.6440, 0.6880, 0.7450, 0.7740, 0.8100,
        0.8080, 0.8020], dtype=torch.float64)
Run: 7, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7950
pavpu
tensor([0.2080, 0.3680, 0.4570, 0.5450, 0.6130, 0.6820, 0.7290, 0.7810, 0.8060,
        0.8000, 0.7930], dtype=torch.float64)
Run: 8, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7980, test_acc: 0.7910
pavpu
tensor([0.2080, 0.3660, 0.4620, 0.5610, 0.6300, 0.6730, 0.7410, 0.7790, 0.7980,
        0.8000, 0.7930], dtype=torch.float64)
Run: 9, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7980
pavpu
tensor([0.1970, 0.3630, 0.4590, 0.5240, 0.5940, 0.6650, 0.7070, 0.7720, 0.8040,
        0.8130, 0.8040], dtype=torch.float64)
Run: 10, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.8040
pavpu
tensor([0.1940, 0.3390, 0.4380, 0.5300, 0.5980, 0.6650, 0.7270, 0.7770, 0.8000,
        0.8090, 0.8070], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.250,samples : 10, Test Accuracy: 0.7972, std: 0.0041
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7960, test_acc: 0.7880
pavpu
tensor([0.2050, 0.3140, 0.3870, 0.4600, 0.5250, 0.5940, 0.6620, 0.7260, 0.7710,
        0.7920, 0.7940], dtype=torch.float64)
Run: 2, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7890
pavpu
tensor([0.2110, 0.3120, 0.3830, 0.4640, 0.5470, 0.6230, 0.6830, 0.7410, 0.7850,
        0.8010, 0.7900], dtype=torch.float64)
Run: 3, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7980
pavpu
tensor([0.1970, 0.3150, 0.3890, 0.4680, 0.5510, 0.6260, 0.7020, 0.7580, 0.8010,
        0.8090, 0.8040], dtype=torch.float64)
Run: 4, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8180, test_acc: 0.8020
pavpu
tensor([0.1950, 0.2870, 0.3730, 0.4410, 0.5240, 0.5880, 0.6890, 0.7490, 0.7850,
        0.8080, 0.8060], dtype=torch.float64)
Run: 5, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7900, test_acc: 0.7770
pavpu
tensor([0.2080, 0.3220, 0.3980, 0.4760, 0.5370, 0.6130, 0.6920, 0.7430, 0.7770,
        0.8000, 0.7930], dtype=torch.float64)
Run: 6, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7930
pavpu
tensor([0.2020, 0.3130, 0.3950, 0.4610, 0.5400, 0.6090, 0.6800, 0.7350, 0.7800,
        0.7930, 0.7990], dtype=torch.float64)
Run: 7, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7960, test_acc: 0.7830
pavpu
tensor([0.2080, 0.3130, 0.4020, 0.4710, 0.5530, 0.6090, 0.6800, 0.7350, 0.7730,
        0.7970, 0.7910], dtype=torch.float64)
Run: 8, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7860
pavpu
tensor([0.2080, 0.3110, 0.3960, 0.4670, 0.5460, 0.6220, 0.6890, 0.7360, 0.7820,
        0.7940, 0.7930], dtype=torch.float64)
Run: 9, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7960, test_acc: 0.7910
pavpu
tensor([0.2070, 0.3070, 0.3870, 0.4670, 0.5470, 0.6110, 0.6870, 0.7420, 0.7670,
        0.7870, 0.7920], dtype=torch.float64)
Run: 10, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7760
pavpu
tensor([0.2170, 0.3210, 0.4030, 0.4750, 0.5610, 0.6220, 0.6780, 0.7390, 0.7890,
        0.7940, 0.7840], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.500,samples : 10, Test Accuracy: 0.7883, std: 0.0083
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7980, test_acc: 0.7960
pavpu
tensor([0.2070, 0.4070, 0.5170, 0.5820, 0.6580, 0.7000, 0.7570, 0.7970, 0.8020,
        0.7980, 0.7940], dtype=torch.float64)
Run: 2, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8200, test_acc: 0.8080
pavpu
tensor([0.1890, 0.3530, 0.4470, 0.5290, 0.6060, 0.6580, 0.7230, 0.7710, 0.8070,
        0.8200, 0.8120], dtype=torch.float64)
Run: 3, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.8000
pavpu
tensor([0.1970, 0.3770, 0.4910, 0.5770, 0.6430, 0.6980, 0.7290, 0.7750, 0.7950,
        0.8030, 0.8020], dtype=torch.float64)
Run: 4, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8200, test_acc: 0.7990
pavpu
tensor([0.2020, 0.3850, 0.4970, 0.5780, 0.6480, 0.6980, 0.7430, 0.7920, 0.8020,
        0.8050, 0.7970], dtype=torch.float64)
Run: 5, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7990
pavpu
tensor([0.1980, 0.3820, 0.4860, 0.5650, 0.6340, 0.6870, 0.7400, 0.7770, 0.8000,
        0.8080, 0.8030], dtype=torch.float64)
Run: 6, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7980
pavpu
tensor([0.1990, 0.4010, 0.5150, 0.5980, 0.6570, 0.7030, 0.7640, 0.7920, 0.8060,
        0.8140, 0.8020], dtype=torch.float64)
Run: 7, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8180, test_acc: 0.8010
pavpu
tensor([0.2070, 0.4130, 0.5270, 0.6190, 0.6690, 0.7110, 0.7470, 0.7940, 0.8070,
        0.8050, 0.7940], dtype=torch.float64)
Run: 8, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8000, test_acc: 0.7950
pavpu
tensor([0.2060, 0.4070, 0.5160, 0.5890, 0.6440, 0.7040, 0.7570, 0.7890, 0.7960,
        0.8000, 0.7950], dtype=torch.float64)
Run: 9, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.8040
pavpu
tensor([0.1980, 0.3910, 0.4970, 0.5840, 0.6460, 0.7020, 0.7290, 0.7730, 0.7960,
        0.8090, 0.8030], dtype=torch.float64)
Run: 10, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.7960, test_acc: 0.7900
pavpu
tensor([0.2090, 0.3950, 0.4930, 0.5730, 0.6360, 0.6900, 0.7380, 0.7750, 0.7880,
        0.7940, 0.7920], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.125,samples : 15, Test Accuracy: 0.7990, std: 0.0049
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8260, test_acc: 0.7960
pavpu
tensor([0.1990, 0.3630, 0.4530, 0.5510, 0.6280, 0.6890, 0.7410, 0.7800, 0.8000,
        0.8040, 0.8000], dtype=torch.float64)
Run: 2, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8280, test_acc: 0.7950
pavpu
tensor([0.2060, 0.3600, 0.4440, 0.5350, 0.6100, 0.6770, 0.7300, 0.7570, 0.7850,
        0.7970, 0.7950], dtype=torch.float64)
Run: 3, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8280, test_acc: 0.7910
pavpu
tensor([0.2040, 0.3570, 0.4580, 0.5470, 0.6070, 0.6780, 0.7230, 0.7590, 0.7860,
        0.8020, 0.7970], dtype=torch.float64)
Run: 4, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.8030
pavpu
tensor([0.1960, 0.3480, 0.4510, 0.5360, 0.6270, 0.6860, 0.7280, 0.7760, 0.7980,
        0.8090, 0.8050], dtype=torch.float64)
Run: 5, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.7910
pavpu
tensor([0.2030, 0.3670, 0.4640, 0.5440, 0.6240, 0.6920, 0.7400, 0.7700, 0.8030,
        0.8070, 0.7980], dtype=torch.float64)
Run: 6, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8220, test_acc: 0.8080
pavpu
tensor([0.1950, 0.3560, 0.4670, 0.5520, 0.6090, 0.6770, 0.7170, 0.7880, 0.8040,
        0.8080, 0.8040], dtype=torch.float64)
Run: 7, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7950
pavpu
tensor([0.2040, 0.3600, 0.4560, 0.5410, 0.6270, 0.6800, 0.7210, 0.7650, 0.7880,
        0.8030, 0.7970], dtype=torch.float64)
Run: 8, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8000, test_acc: 0.8000
pavpu
tensor([0.1980, 0.3450, 0.4410, 0.5440, 0.5940, 0.6510, 0.7180, 0.7690, 0.7920,
        0.8100, 0.8030], dtype=torch.float64)
Run: 9, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.8100
pavpu
tensor([0.1940, 0.3550, 0.4640, 0.5360, 0.6170, 0.6810, 0.7310, 0.7780, 0.7940,
        0.8060, 0.8070], dtype=torch.float64)
Run: 10, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.8040
pavpu
tensor([0.1910, 0.3480, 0.4640, 0.5420, 0.6080, 0.6670, 0.7140, 0.7730, 0.7920,
        0.8090, 0.8080], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.250,samples : 15, Test Accuracy: 0.7993, std: 0.0068
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.8010
pavpu
tensor([0.1960, 0.3110, 0.3980, 0.4650, 0.5370, 0.6200, 0.6820, 0.7460, 0.7920,
        0.8050, 0.8050], dtype=torch.float64)
Run: 2, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.8040
pavpu
tensor([0.1940, 0.3000, 0.3820, 0.4780, 0.5520, 0.6100, 0.6880, 0.7500, 0.7890,
        0.8080, 0.8070], dtype=torch.float64)
Run: 3, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.7960
pavpu
tensor([0.2090, 0.3060, 0.3780, 0.4470, 0.5400, 0.5920, 0.6770, 0.7430, 0.7800,
        0.7970, 0.7920], dtype=torch.float64)
Run: 4, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.7990
pavpu
tensor([0.2040, 0.3110, 0.3930, 0.4730, 0.5450, 0.6230, 0.6970, 0.7340, 0.7800,
        0.8010, 0.7970], dtype=torch.float64)
Run: 5, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8240, test_acc: 0.7990
pavpu
tensor([0.1960, 0.3200, 0.3860, 0.4780, 0.5600, 0.6460, 0.7030, 0.7560, 0.7920,
        0.8080, 0.8050], dtype=torch.float64)
Run: 6, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7940, test_acc: 0.7790
pavpu
tensor([0.2120, 0.3220, 0.4040, 0.4820, 0.5540, 0.6170, 0.6840, 0.7340, 0.7810,
        0.7860, 0.7890], dtype=torch.float64)
Run: 7, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7960
pavpu
tensor([0.2020, 0.3060, 0.3980, 0.4730, 0.5580, 0.6360, 0.6970, 0.7480, 0.7850,
        0.8010, 0.7970], dtype=torch.float64)
Run: 8, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.7940, test_acc: 0.7950
pavpu
tensor([0.2090, 0.3190, 0.3960, 0.4920, 0.5660, 0.6420, 0.6990, 0.7700, 0.7990,
        0.7980, 0.7920], dtype=torch.float64)
Run: 9, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.7990
pavpu
tensor([0.2020, 0.3010, 0.3760, 0.4490, 0.5380, 0.6140, 0.6870, 0.7380, 0.7870,
        0.8040, 0.7990], dtype=torch.float64)
Run: 10, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.7940
pavpu
tensor([0.2050, 0.3080, 0.3800, 0.4700, 0.5420, 0.6190, 0.7010, 0.7460, 0.7820,
        0.7940, 0.7940], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.500,samples : 15, Test Accuracy: 0.7962, std: 0.0067
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.7930
pavpu
tensor([0.1980, 0.3630, 0.4830, 0.5550, 0.6280, 0.6880, 0.7340, 0.7750, 0.8050,
        0.8030, 0.8010], dtype=torch.float64)
Run: 2, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7910
pavpu
tensor([0.2110, 0.3980, 0.4950, 0.5730, 0.6340, 0.6820, 0.7330, 0.7790, 0.7840,
        0.7930, 0.7900], dtype=torch.float64)
Run: 3, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8180, test_acc: 0.8000
pavpu
tensor([0.2030, 0.3700, 0.4730, 0.5560, 0.6270, 0.6950, 0.7460, 0.7910, 0.8070,
        0.8080, 0.7980], dtype=torch.float64)
Run: 4, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7930
pavpu
tensor([0.2070, 0.4020, 0.4940, 0.5820, 0.6510, 0.7000, 0.7540, 0.7830, 0.7960,
        0.8010, 0.7940], dtype=torch.float64)
Run: 5, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.8030
pavpu
tensor([0.1960, 0.3860, 0.5030, 0.5800, 0.6570, 0.6950, 0.7480, 0.7850, 0.8010,
        0.8070, 0.8050], dtype=torch.float64)
Run: 6, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7950
pavpu
tensor([0.2040, 0.3880, 0.5090, 0.5820, 0.6450, 0.6950, 0.7250, 0.7830, 0.7930,
        0.8010, 0.7970], dtype=torch.float64)
Run: 7, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8000, test_acc: 0.7940
pavpu
tensor([0.2030, 0.3910, 0.5010, 0.5790, 0.6540, 0.6990, 0.7430, 0.7890, 0.7990,
        0.8000, 0.7980], dtype=torch.float64)
Run: 8, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7970
pavpu
tensor([0.2020, 0.3790, 0.4710, 0.5600, 0.6340, 0.6880, 0.7390, 0.7810, 0.8050,
        0.7980, 0.7970], dtype=torch.float64)
Run: 9, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8180, test_acc: 0.8060
pavpu
tensor([0.1970, 0.3670, 0.4780, 0.5650, 0.6260, 0.6790, 0.7270, 0.7590, 0.7890,
        0.8040, 0.8040], dtype=torch.float64)
Run: 10, dropout_rate: 0.1250,train_acc: 0.0000, val_acc: 0.8200, test_acc: 0.8160
pavpu
tensor([0.1840, 0.3480, 0.4460, 0.5300, 0.6110, 0.6740, 0.7250, 0.7690, 0.8030,
        0.8170, 0.8150], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.125,samples : 20, Test Accuracy: 0.7988, std: 0.0077
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8060, test_acc: 0.8090
pavpu
tensor([0.2000, 0.3770, 0.4870, 0.5790, 0.6430, 0.6950, 0.7440, 0.7940, 0.8040,
        0.8140, 0.7990], dtype=torch.float64)
Run: 2, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8160, test_acc: 0.7980
pavpu
tensor([0.2080, 0.3750, 0.4820, 0.5600, 0.6360, 0.6880, 0.7390, 0.7730, 0.7960,
        0.8010, 0.7930], dtype=torch.float64)
Run: 3, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8300, test_acc: 0.7890
pavpu
tensor([0.2080, 0.3810, 0.4720, 0.5630, 0.6260, 0.6960, 0.7420, 0.7700, 0.7930,
        0.7960, 0.7930], dtype=torch.float64)
Run: 4, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8160, test_acc: 0.7960
pavpu
tensor([0.1980, 0.3540, 0.4580, 0.5500, 0.6010, 0.6650, 0.7230, 0.7630, 0.8060,
        0.8080, 0.8030], dtype=torch.float64)
Run: 5, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8220, test_acc: 0.7980
pavpu
tensor([0.2090, 0.3680, 0.4720, 0.5720, 0.6470, 0.6920, 0.7360, 0.7700, 0.8000,
        0.7980, 0.7920], dtype=torch.float64)
Run: 6, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8140, test_acc: 0.7910
pavpu
tensor([0.2100, 0.3670, 0.4500, 0.5340, 0.6220, 0.6710, 0.7150, 0.7720, 0.7910,
        0.7990, 0.7890], dtype=torch.float64)
Run: 7, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8000, test_acc: 0.7940
pavpu
tensor([0.1980, 0.3520, 0.4580, 0.5420, 0.6230, 0.6880, 0.7330, 0.7760, 0.7940,
        0.7990, 0.8010], dtype=torch.float64)
Run: 8, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.8010
pavpu
tensor([0.2020, 0.3530, 0.4410, 0.5340, 0.6080, 0.6710, 0.7360, 0.7730, 0.7980,
        0.8060, 0.7990], dtype=torch.float64)
Run: 9, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.8010
pavpu
tensor([0.1920, 0.3510, 0.4590, 0.5500, 0.6220, 0.6880, 0.7310, 0.7790, 0.8050,
        0.8110, 0.8090], dtype=torch.float64)
Run: 10, dropout_rate: 0.2500,train_acc: 0.0000, val_acc: 0.7960, test_acc: 0.7890
pavpu
tensor([0.2030, 0.3420, 0.4400, 0.5280, 0.6060, 0.6620, 0.7150, 0.7710, 0.7980,
        0.8060, 0.7980], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.250,samples : 20, Test Accuracy: 0.7966, std: 0.0062
Create a 2-layered Bi-GCN.
Layer 0, in_dim 500, out_dim 256
Layer 1, in_dim 256, out_dim 3
Run: 1, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8160, test_acc: 0.8050
pavpu
tensor([0.1940, 0.3090, 0.3920, 0.4910, 0.5710, 0.6590, 0.7110, 0.7600, 0.7960,
        0.8160, 0.8070], dtype=torch.float64)
Run: 2, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8080, test_acc: 0.7870
pavpu
tensor([0.2040, 0.3140, 0.3920, 0.4790, 0.5540, 0.6270, 0.6820, 0.7470, 0.7870,
        0.8020, 0.7970], dtype=torch.float64)
Run: 3, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.7850
pavpu
tensor([0.2090, 0.3160, 0.4090, 0.4840, 0.5730, 0.6290, 0.7000, 0.7480, 0.7850,
        0.7990, 0.7920], dtype=torch.float64)
Run: 4, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8040, test_acc: 0.7920
pavpu
tensor([0.2060, 0.3090, 0.3920, 0.4590, 0.5310, 0.6070, 0.6810, 0.7370, 0.7800,
        0.7920, 0.7950], dtype=torch.float64)
Run: 5, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7880
pavpu
tensor([0.2080, 0.3170, 0.3960, 0.4780, 0.5550, 0.6300, 0.6950, 0.7450, 0.7790,
        0.7880, 0.7930], dtype=torch.float64)
Run: 6, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.7950
pavpu
tensor([0.2050, 0.3190, 0.3860, 0.4680, 0.5580, 0.6220, 0.6940, 0.7380, 0.7800,
        0.8030, 0.7960], dtype=torch.float64)
Run: 7, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8100, test_acc: 0.7990
pavpu
tensor([0.2020, 0.3080, 0.3910, 0.4690, 0.5600, 0.6260, 0.6970, 0.7530, 0.7970,
        0.8030, 0.7990], dtype=torch.float64)
Run: 8, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8120, test_acc: 0.8020
pavpu
tensor([0.2020, 0.3140, 0.3910, 0.4710, 0.5500, 0.6260, 0.6790, 0.7540, 0.7850,
        0.8070, 0.7990], dtype=torch.float64)
Run: 9, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8020, test_acc: 0.7910
pavpu
tensor([0.1930, 0.3090, 0.3930, 0.4910, 0.5760, 0.6280, 0.6920, 0.7600, 0.7990,
        0.8090, 0.8060], dtype=torch.float64)
Run: 10, dropout_rate: 0.5000,train_acc: 0.0000, val_acc: 0.8200, test_acc: 0.7980
pavpu
tensor([0.1960, 0.3120, 0.4030, 0.4790, 0.5580, 0.6400, 0.6880, 0.7600, 0.7760,
        0.8090, 0.8050], dtype=torch.float64)
Experiment: default_exp_name
Binarized: 1,Precision sparsity: 1,Dropout rate: 0.500,samples : 20, Test Accuracy: 0.7942, std: 0.0067
